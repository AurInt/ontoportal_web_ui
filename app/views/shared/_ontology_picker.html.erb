<style type="text/css">
  .ont_select_adv {
    border-radius: 0;
  }

  .ont_select_adv > .ui-widget-header {
    background: none;
    border-radius: 0;
    border: none;
  }

	div.chzn-container {
		width: 432px !important;
	}

	div.chzn-container-active ul.chzn-choices li.search-field input {
		font-style: normal !important;
	}

  div.chzn-container ul.chzn-choices {
    max-height: 110px;
    overflow: auto;
  }
  
  div.chzn-container li.search-field input {
  	font-style: oblique;
  }
  	
  div.chzn-drop {
  	display: none;
  }
  
  .no_right_border {
  	border-right: none !important;
  }
  
  .help_text {
  	color: gray;
  	font-style: oblique;
  }
</style>

<script type="text/javascript">
var abbreviationMap = { <%= @onts_for_js.join(", ") %> };
var winHeight = jQuery(window).height();
var ontSelectListPos = { top: 0, left: 0, width: 0 };
var allSelected = false;

jQuery(window).ready(function(){
  jQuery("#ontology_ontologyId").chosen();

  ontSelectListPos.top = jQuery("#ontology_ontologyId_chzn").offset().top;
  ontSelectListPos.left = jQuery("#ontology_ontologyId_chzn").offset().left;
  ontSelectListPos.width = jQuery("#ontology_ontologyId_chzn").width();

  // Watch for changes in the entry of the select list
  jQuery("#ontology_ontologyId").change(function(e) {
    ontLabelToAbbr();
    syncFromList();
  });

  // Reset labels on page load and make sure checkbox is in sync
  ontLabelToAbbr();
  syncFromList()

  // Unbind the click handler from the ontology list
  jQuery("#ontology_ontologyId_chzn").bind("focus", hideChosenResults);
  jQuery("#ontology_ontologyId_chzn").bind("keydown", showChosenResults);

	// Hide the advanced select when focusing in the chosen select box
  jQuery("#ontology_ontologyId_chzn").bind("focus", hideAdvancedSelect);
  
  // Hide the advanced select when clicking anywhere except in advanced select
  jQuery('html').click(function() {
  	hideAdvancedSelect();
	});

	jQuery('#ont_select_adv').click(function(event){
		event.stopPropagation();
	});

  // Wire up the link to open dialog box
  jQuery("#ont_select_adv_href").click(function() {
  	var ont_select = jQuery("#ont_select_adv");
  	var chzn_select = jQuery("#ontology_ontologyId_chzn");
  	
  	ont_select.css("top", jQuery(window).scrollTop() + 50 + "px");
  	ont_select.css("left", chzn_select.offset().left + chzn_select.width() - 1);
  	ont_select.css("width", jQuery(window).width() - (chzn_select.offset().left + chzn_select.width()) - 100 + "px");
  	ont_select.css("height", jQuery(window).height() - 100);
  	
  	// Configure the chosen select list box to remove background, move z-index above the advanced select
  	chzn_select.css("z-index", "4000");
  	chzn_select.children("ul.chzn-choices").addClass("no_right_border");
  	chzn_select.children("ul.chzn-choices").css("background", "white");
  	// Chosen select list congig changes for IE
  	chzn_select.children("ul.chzn-choices").css("filter", "none");
  	jQuery("#ontology_ontologyId_chzn input").css("filter", "none")
  	
  	jQuery("#ontology_ontologyId_container").css("box-shadow", "0 0 10px gray");

		jQuery("#ont_list_container").height(ont_select.height() - 80);
  	
    jQuery("#ont_select_adv").show();
    return false;
  });
  
  // Wire up close advanced select "X"
  jQuery("#close_adv_select").click(function(){
  	hideAdvancedSelect();
  });

  // Wire up watcher for checkboxes for sync
  jQuery(".ont_select_boxes_tr input:checkbox").click(function(){
    syncFromCheckboxes();
    if (allSelected = true) {
      allSelected = false;
      jQuery("#ont_select_all").attr("checked", false);
    } else {
      // Compare total checkboxes to checked to see if they're all checked
      if (jQuery(".ont_select_boxes_tr input:checkbox").length == jQuery(".ont_select_boxes_tr input:checked").length) {
        allSelected = true;
        jQuery("#ont_select_all").attr("checked", true);
      }
    }
  });

  // Toggle all selected
  jQuery("#ont_select_all").click(function(){
    if (jQuery(this).attr("checked")) {
      allSelected = true;

      jQuery(".ont_select_boxes_tr input:checkbox").attr("checked", true);

      syncFromCheckboxes();
      refreshOntList();
    } else {
      allSelected = false;

      jQuery(".ont_select_boxes_tr input:checkbox").attr("checked", false);

      syncFromCheckboxes();
      refreshOntList();
    }
  });
  
  // Helper text for advanced search filter
  jQuery("#advanced_filter_input").val(jQuery("#advanced_filter_input").attr("title"));
  jQuery("#advanced_filter_input").focus(function(){
  	var input = jQuery(this);
  	if (input.attr("title") == input.val()) {
  		input.val("");
  		input.removeClass("help_text");
  	} 
  });
  jQuery("#advanced_filter_input").blur(function(){
  	var input = jQuery(this);
  	if (input.val() == "") {
  		input.val(input.attr("title"));
  		input.addClass("help_text");
  	}
  });
});


var hideAdvancedSelect = function(){
	if (jQuery("#ont_select_adv").is(":visible")) {
		jQuery("#ont_select_adv").hide();
  	jQuery("#ontology_ontologyId_chzn").children("ul.chzn-choices").removeClass("no_right_border").css("background", "");
  	jQuery("#ontology_ontologyId_container").css("box-shadow", "");
	}
}

var showChosenResults = function(){
	if (!jQuery("#ontology_ontologyId_chzn_o_0").closest("div.chzn-drop").is(":visible")) {
		jQuery("#ontology_ontologyId_chzn_o_0").closest("div.chzn-drop").show();
	}
}

var hideChosenResults = function(){
	if (jQuery("#ontology_ontologyId_chzn_o_0").closest("div.chzn-drop").is(":visible")) {
		jQuery("#ontology_ontologyId_chzn_o_0").closest("div.chzn-drop").hide();
	}
}

// Synchronize checkboxes to select list
function syncFromCheckboxes() {
  var checkedIds = [];
  jQuery(".ont_select_boxes_tr input:checked").each(function(){
    checkedIds.push(jQuery(this).val());
  });
  jQuery("#ontology_ontologyId").val(checkedIds);
  refreshOntList();
}

// Synchronise select list to checkboxes
function syncFromList() {
  jQuery(".ont_select_boxes_tr input:checked").each(function(){
    jQuery(this).attr("checked", false);
  });

  jQuery("#ontology_ontologyId option:selected").each(function(){
    var id = jQuery(this).val();
    jQuery("#ont_select_adv_check" + id).attr("checked", true);
  });
}

// Check the selected list of ontologies against the map and replace
function ontLabelToAbbr() {
  jQuery("#ontology_ontologyId_chzn > .chzn-choices > li > span").each(function(){
  	if (jQuery(this).children("span.chzn-abbr").length == 0) {
	    jQuery(this).html("<span class='chzn-abbr' title='"+jQuery(this).html()+"'>"+abbreviationMap[jQuery(this).html()]+"</span>");
  	}
  });
}

function refreshOntList() {
  jQuery("#ontology_ontologyId").trigger("liszt:updated");
  jQuery("#ontology_ontologyId").trigger("change");
}

// Filters ontology list
(function (jQuery) {
  // custom css expression for a case-insensitive contains()
  jQuery.expr[':'].Contains = function(a,i,m){
      return (a.textContent || a.innerText || "").toUpperCase().indexOf(m[3].toUpperCase())>=0;
  };


  function listFilter(input, list) { // header is any element, list is an unordered list
		console.log(input)
    jQuery(input)
      .change( function () {
        var filter = jQuery(this).val();
        if(filter) {
          // this finds all links in a list that contain the input,
          // and hide the ones not containing the input while showing the ones that do
          jQuery(list).find("td:not(:Contains(" + filter + "))").closest("tr").hide();
          jQuery(list).find("td:Contains(" + filter + ")").closest("tr").show();
        } else {
          jQuery(list).find("tr").show();
        }
        return false;
      })
    .keyup( function () {
        // fire the above change event after every letter
        jQuery(this).change();
    });
  }


  //ondomready
  jQuery(function () {
    listFilter(jQuery("#advanced_filter_input"), jQuery("#ont_list"));
  });
}(jQuery));
</script>



<div style="margin-bottom: 1em; width: 432px;">
	<h2 style="margin-bottom: 3px;">Select Ontologies</h2>
	
	<div id="ontology_ontologyId_container">
  	<%= select :ontology, "ontologyId", options_for_select(@onts_for_select), { }, :multiple => 'true', "data-placeholder".to_sym => "Type here to select ontologies or leave blank to use all" %>
  </div>
  
  <div style="float: right; font-size: smaller;"><a id="ont_select_adv_href" href="javascript:void(0)">select from list</a></div>

  <div id="ont_select_adv" style="display: none; text-align: left; border: thin solid gray; position: absolute; background: white; overflow: hidden; max-width: 550px; box-shadow: 0 0 10px gray;">
  	<div id="ont_select_adv_inner" style="padding: 15px; background: white; z-index: 5000;">
	  	<h2>Multiple Ontologies Select <a href="javascript:void(0);" id="close_adv_select" class="ui-dialog-titlebar-close ui-corner-all" role="button" unselectable="on" style="-moz-user-select: none; float: right;"><span class="ui-icon ui-icon-closethick" unselectable="on" style="-moz-user-select: none;">close</span></a></h2>
	    
	    <input type="text" id="advanced_filter_input" class="help_text" style="width: 300px; margin-bottom: 10px;" title="Search ontology names">
	    
	    <div id="ont_list_container" style="overflow: auto; position: relative;">
		    <table id="ont_list">
		      <!--
		      <tr>
		        <td style="padding-bottom: 5px;"><%= check_box_tag "ont_select_all" %></td>
		        <td style="padding: 0 0 5px 5px;"><%= label_tag "ont_select_all", "All" %></td>
		      </tr>
		      -->
		      
		      <% @onts_for_select.each do |ont| %>
		        <tr class="ont_select_boxes_tr">
		          <td valign="top"><%= check_box_tag "ont_select_adv_check", ont[1], false, :id => "ont_select_adv_check#{ont[1]}" %></td>
		          <td style="padding-left: 5px;"><%= label_tag "ont_select_adv_check#{ont[1]}", ont[0] %></td>
		        </tr>
		      <% end %>
		    </table>
	    </div>
    </div>
  </div>
</div>

