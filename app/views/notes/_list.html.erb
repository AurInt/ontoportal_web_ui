
<%
	# Check to see if we have notes, if not then try to get them
	if @notes.nil? && @concept && @ontology
	  @notes = DataAccess.getNotesForConcept(@ontology.ontologyId, @concept.fullId_proper, false, true) rescue nil
	  @note_link = "/notes/virtual/#{@ontology.ontologyId}/?noteid="
	  @context = "concept"
	end

    @semi_uuid = (1000 * Time.now.to_f).to_i
	note_colspan = (@context && @context.eql?("concept")) ? "4" : "5"
%>

<script type="text/javascript">
	
// Global cached data
var oTable = null;	

var target = <%= (@context && @context.eql?("concept")) ? "{ 'bVisible': false }" : "null" %>;

<% if @concept %>
	jQuery.data(document.body, "node_id", "<%=@concept.id%>");
<% end %>

// Colspan data cached
jQuery.data(document.body, "note_colspan", "<%= note_colspan %>");

// Ontology id
jQuery.data(document.body, "ontology_id", "<%= @ontology.ontologyId %>");

// Load external JS files
if (typeof BP_NOTES_LIST_LOADED == 'undefined') jQuery.getScript("/javascripts/bp_notes_list.js");

jQuery(document).ready(function(){
	// Wire up table if it hasn't been done yet
	if (oTable == null) {
		oTable = jQuery('#<%=@semi_uuid%>_notes_list').dataTable({
			"iDisplayLength": 50,
			"sPaginationType": "full_numbers",
			"aaSorting": [[5, 'desc']],
			"aoColumns": [
				{ "iDataSort": 1 }, // Subject link
				{ "bVisible": false }, // Subject for sort
				 null, // Author
				 null, // Type
				 target, // Target
				 null // Created
			],
			"fnDrawCallback": function(){
				jQuery(".highlighted_row").removeClass("highlighted_row");
			},
			"fnInitComplete": function(){
			}
		});
	}
});



</script>

<style type="text/css">
	#notes_list_container {
		width: 80%;
		padding: 1em;
	}
	
	/* Datatables */
	.notes_list_table {
		clear: both;
	}
	#notes_list_container .dataTables_length {
		float: left;
		padding: 1em 0;
	}
	#notes_list_container .dataTables_filter {
		float: right;
		padding: 1em 0;
	}
	#notes_list_container .dataTables_filter input {
		width: 300px;
	}
	#notes_list_container .dataTables_info {
		text-align: center;
		padding: .5em;
	}
	#notes_list_container .dataTables_paginate {
		text-align: center;
	}
	#notes_list_container .dataTables_paginate .paginate_button {
		text-decoration: underline;
		cursor: pointer;
		padding: 0 .5em;
	}
	#notes_list_container .dataTables_paginate .paginate_button:hover {
		text-decoration: none;
	}
	#notes_list_container .first, #notes_list_container .previous, #notes_list_container .next, #notes_list_container .last {
		padding: 0 .5em;
	}
	.paginate_active {
		font-weight: bold;
	}
	
	.highlighted_row {
		background-color: #234979;
		border-top: medium solid #234979 !important;
		border-right: medium solid #234979 !important;
		border-left: medium solid #234979 !important;
		border-bottom: none !important;
		font-weight: bold;
		color: white !important;
	}
	.highlighted_row a {
		color: white !important;
	}
	.highlighted_border {
		border-right: medium solid #234979 !important;
		border-bottom: medium solid #234979 !important;
		border-left: medium solid #234979 !important;
	}
	
</style>

<div id="notes_list_container">

	<% unless @notes_for.nil? %>
		<h1>Notes for <%=link_to @notes_for, @notes_for_link %></h1>
	<% end %>

	<table id="<%=@semi_uuid%>_notes_list" class="zebra notes_list_table" width="100%">
		<thead>
			<tr>
				<th>
					Subject
				</th>
				<th>
					Subject Sort
				</th>
				<th>
					Author
				</th>
				<th>
					Type
				</th>
				<th>
					Target
				</th>
				<th>
					Created
				</th>
			</tr>
		</thead>
		<tbody id="notes_list_body">
			<% if @notes.nil? || @notes.empty? %>
				<tr id="no_notes">
					<td>No notes to display</td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
					<td></td>
				</tr>
			<% else %>
				<% @notes.each do |note| %>
					<tr>
						<td>
							<%= link_to note.subject, "#{@note_link}#{note.id}", :id => "row_#{note.id}", :class => "notes_list_link" %>
						</td>
						<td>
							<%= note.subject %>
						</td>
						<td>
							<%= get_username(note.author) %>
						</td>
						<td>
							<%= get_note_type_text(note.type) %>
						</td>
						<td>
							<%= get_applies_to_link note.createdInOntologyVersion, note.appliesTo['type'], note.appliesTo['id'] %> (<%= note.appliesTo['type'] %>)
						</td>
						<td>
							<%= time_formatted_from_java(note.created) %>
						</td>
					</tr>
				<% end %>
			<% end %>
		</tbody>
	</table>
	
	<% applies_to = @concept ? @concept.fullId_proper : @ontology.ontologyId %>
	<% applies_to_type = @concept ? "Class" : "Ontology" %>
	<%= render :partial => 'notes/add', :locals => { :applies_to => applies_to, :applies_to_type => applies_to_type } %>

</div>

