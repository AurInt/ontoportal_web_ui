- button_text ||= "Create ontology"
- title_text ||= "Submit New Ontology"

:javascript
  function hideAllRestrictions() {
    jQuery(".viewing_restriction_disabled").attr("disabled", true);
    jQuery("div.viewing_restriction_types").addClass("hidden");
  }

  function showRestrictionPrivate() {
    jQuery("#ontology_acl").removeAttr("disabled");
    jQuery("#viewingRestrictionsPrivate").removeClass("hidden");
  }

  function showRestrictionLicensed() {
    jQuery("#ontology_licenseInformation").removeAttr("disabled");
    jQuery("#viewingRestrictionsLicensed").removeClass("hidden");
  }

  jQuery(document).ready(function(){
    // Wire up options for restriction how an ontology is viewed
    jQuery("#ontology_viewingRestriction").change(function(){
      var select = jQuery(this);
      if (select.val() == "private") {
        hideAllRestrictions()
        showRestrictionPrivate();
      } else if (select.val() == "licensed") {
        hideAllRestrictions();
        showRestrictionLicensed();
      } else if (select.val() == "public") {
        hideAllRestrictions();
      }
    });

    // Make sure you can see the account select if the select list has private selected
    if (jQuery("#ontology_viewingRestriction").val() == "private") {
      showRestrictionPrivate();
    } else if (jQuery("#ontology_viewingRestriction").val() == "licensed") {
      showRestrictionLicensed();
    }

    jQuery("#ontology_isView").live("click", function(){
      console.log(jQuery("#ontology_isView").is(":checked"))
      if (jQuery("#ontology_isView").is(":checked")) {
        jQuery("#ontology_viewOf").removeAttr('disabled').trigger("liszt:updated");
      } else {
        jQuery("#ontology_viewOf").attr('disabled', true).trigger("liszt:updated");
      }
    });

    // Wire up chosen selectors
    jQuery("#ontology_administeredBy").chosen();
    jQuery("#ontology_acl").chosen();
    jQuery("#ontology_hasDomain").chosen();
  });

- unless @errors.nil?
  .enable-lists{:style => "color:red;"}
    %strong Errors On Form
    %ul
      - @errors.each do |field, error|
        %li
          - if @ontology.public_methods(false).include?(field.to_sym)
            - error = error.first[1] if error.is_a?(Hash)
            = error
            <style>#ontology_#{field} { border: thin solid red; }</style>
          - else
            = field

%div{:style => "width:500px"}
  %span.asterik{:style => "float:right;"} * fields are required
  %h1 #{title_text}
%table#new_ontology.form{:width => "50%"}
  %tr
    %th
      Name:
      %span.asterik *
    %td.top
      = f.text_field :name, value: @ontology.name
  %tr
    %th
      Acronym:
      %span.asterik *
    %td
      = f.text_field :acronym, value: @ontology.acronym
  %tr
    %th
      Administrators:
      %span.asterik *
    %td
      = f.select(:administeredBy, @user_select_list, {selected: @ontology.administeredBy || session[:user].id}, {multiple: true, :"data-placeholder" => "Select administrators"})
  %tr
    %th
      Viewing Restrictions
    %td
      - view_restiction_options = [["Public", "public"], ["Private", "private"], ["Licensed", "licensed"]]
      - selected = @ontology.private? ? "private" : ""
      - selected = @ontology.licensed? ? "licensed" : selected
      - display_private = @ontology.private? ? "" : "hidden"
      - display_licensed = @ontology.licensed? ? "" : "hidden"
      = f.select :viewingRestriction, view_restiction_options, { :selected => selected }
      #viewingRestrictionsPrivate.viewing_restriction_types{:style => "padding: .5em; border: thin solid #C1DAD7; margin: .5em .5em .5em 0;", class: display_private}
        %h3 Add or remove accounts that are allowed to view classes in this ontology using the account name
        = f.select(:acl, @user_select_list, {include_blank: true, selected: @ontology.acl}, {multiple: true, :"data-placeholder" => "Select users who have access"})
      #viewingRestrictionsLicensed.viewing_restriction_types{:style => "padding: .5em; border: thin solid #C1DAD7; margin: .5em .5em .5em 0;", class: display_licensed}
        %b License Text:
        The text below explains what licensing information you want to collect before allowing access. We will display this text and record the user's response when the user attempts to access your ontology.
        - disabled = @ontology.licensed? ? {} : {:disabled => "true"}
        = f.text_area :licenseInformation, { :rows => 5, :class => "viewing_restriction_disabled", :style => "width: 90%;" }.merge(disabled)

  %tr
    %th
      Categories:
    %td
      - cat_select = @categories.sort{|a,b| a.name <=> b.name}.map{|c| [c.name, c.id]}
      = f.select(:hasDomain, cat_select, {selected: @ontology.hasDomain}, {multiple: true, :"data-placeholder" => "Select cateogory (domain)"})

  %tr
    %th
      View:
    %td
      = f.check_box :isView, checked: @ontology.view?
      = f.label :isView, "This ontology is a view of:"
      #viewOf_picker{style: "padding-top: .3em;"}
        - single_picker_locals = {:picker_id => "ontology_viewOf", placeholder: "Select an ontology to create a view on", field_name: "viewOf", disabled: !@ontology.view?, selected: @ontology.viewOf}
        = render :partial => "shared/ontology_picker_single", :locals => single_picker_locals

  %tr
    %td{:align => "right", :colspan => "2"}
      = f.label :subscribe_notifications, "Subscribe to email notifications for new notes"
      = f.check_box :subscribe_notifications
  %tr
    %td{:align => "right", :colspan => "2"}
      = submit_tag button_text
