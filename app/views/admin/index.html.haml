- @title = "BioPortal Administration"
:javascript
  var DUMMY_ONTOLOGY = "DUMMY_ONT";
  var problemOnly = true;

  // memcached reset functions ------------------
  function resetMemcacheConnection() {
    ajaxCall("POST", "MEMCACHE CONNECTION RESET", "resetcache", {ontologies: DUMMY_ONTOLOGY});
  }

  function flushMemcache() {
    ajaxCall("POST", "FLUSHING OF MEMCACHE", "clearcache", {ontologies: DUMMY_ONTOLOGY});
  }
  // end: memcached reset functions ------------------

  // ontologies table functions ------------------
  function toggleShow(val) {
    problemOnly = val;
  }

  function deleteOntologies(acronyms) {
    ontMsg = acronyms.replace(new RegExp(',', 'g'), ', ');
    alertify.set({labels: {ok: "Delete!", cancel: "Cancel"}});
    alertify.confirm("You are about to delete the following ontologies:<br/><span style='color:red;font-weight:bold;'>" + ontMsg + "</span><br/><b>This action CAN NOT be undone!!! Are you sure?</b>", function(e) {
      if (e) {
        ajaxCall("DELETE", "ONTOLOGY DELETION", "ontologies", {ontologies: acronyms});
      }
    });
    return false;
  }

  function performActionOnOntologies() {
    var actionSelect = jQuery('#admin_action');
    var action = actionSelect.val();
    var acronyms = '';

    if (!action) {
      alertify.alert("Please choose an action to perform on the selected ontologies.");
      return;
    }

    var ontTable = jQuery('#adminOntologies').DataTable();
    ontTable.rows('.selected').every(function() {
      //var d = this.data();
      //var idx = this.index();
      //var tr = jQuery(this).parents('tr');
      //var cell = ontologiesTable.cell(idx, 0);
      //var td0HTMLElem = cell.node();
      var trId = this.node().id;
      acronyms += trId.substring("tr_".length) + ",";
    });

    if (acronyms.length) {
      acronyms = acronyms.slice(0, -1);
    } else {
      alertify.alert("Please select at least one ontology from the table to perform action on.");
      return;
    }

    switch(action) {
      case "delete":
        deleteOntologies(acronyms);
        break;
      case "reparse":
        console.log("reparsing");
        break;
    }
  }

  function deleteSubmission(acronym, submissionId) {
    alertify.confirm("Are you sure you want to delete submission <span style='color:red;font-weight:bold;'>" + submissionId + "</span> for ontology <span style='color:red;font-weight:bold;'>" + acronym + "</span>?<br/><b>This action CAN NOT be undone!!!</b>", function(e) {
      if (e) {
        ajaxCall("DELETE", "SUBMISSION DELETION", "ontologies/" + acronym + "/submissions/" + submissionId, {ontologies: acronym});
      }
    });
  }









  function refreshReport() {
    //alertify.confirm("Refreshing this report takes a while...<br/>Are you sure you're ready for some coffee time?", function(e) {
    //  if (e) {
        ajaxCall("POST", "REPORT REGENERATION", "refresh_ontologies_report", {ontologies: DUMMY_ONTOLOGY});
    //  }
    //});
    return false;
  }

  function populateOntologyRows(data) {
    var ontologies = data.ontologies;
    var allRows = [];
    var hideFields = ["errErrorStatus", "errMissingStatus", "problem"];

    for (var acronym in ontologies) {
      var errorMessages = [];
      var ontology = ontologies[acronym];
      var ontLink = "<a id='link_submissions_" + acronym + "' href='javascript:;' onclick='showSubmissions(event, \"" + acronym + "\")' style='" + (ontology["problem"] === true ? "color:red" : "") + "'>" + acronym + "</a>";
      var bpLinks = '<a href="#" target="_blank">Log</a> | <a href="' + BP_CONFIG.rest_url + '/ontologies/' + acronym + '" target="_blank">REST</a> | <a href="' + BP_CONFIG.ui_url + '/ontologies/' + acronym + '" target="_blank">BioPortal</a>';
      var errStatus = ontology["errErrorStatus"] ? ontology["errErrorStatus"].join(", ") : '';
      var missingStatus = ontology["errMissingStatus"] ? ontology["errMissingStatus"].join(", ") : '';

      for (var k in ontology) {
        if (jQuery.inArray(k, hideFields) === -1) {
          errorMessages.push(ontology[k]);
        }
      }
      row = [ontLink, bpLinks, errStatus, missingStatus, errorMessages.join("<br/>"), ontology["problem"]];
      allRows.push(row);
    }
    return allRows;
  }

  function displayOntologies(data) {
    var ontTable = null;

    if (jQuery.fn.dataTable.isDataTable('#adminOntologies')) {
      allRows = populateOntologyRows(data);
      ontTable = jQuery('#adminOntologies').DataTable();
      ontTable.clear();
      ontTable.rows.add(allRows);
      ontTable.draw();
    } else {
      ontTable = jQuery("#adminOntologies").DataTable({
        "ajax": {
          "url": BP_CONFIG.ui_url + "/admin/ontologies_report",
          "contentType": "application/json",
          "dataSrc": function (json) {
            return populateOntologyRows(json);
          }
        },
        "rowCallback": function(row, data, index) {
          var acronym = jQuery('td:first', row).text();
          jQuery(row).attr("id", "tr_" + acronym);

        if (data[data.length - 1] === true) {
          jQuery(row).addClass("problem");
        }
        },
        "columnDefs": [
          {
            "targets": 0,
            "searchable": true,
            "title": "Acronym",
            "width": "12%"
          },
          {
            "targets": 1,
            "searchable": false,
            "title": "URL",
            "width": "9%"
          },
          {
            "targets": 2,
            "searchable": true,
            "title": "Error Status",
            "width": "10%"
          },
          {
            "targets": 3,
            "searchable": true,
            "title": "Missing Status",
            "width": "10%"
          },
          {
            "targets": 4,
            "searchable": true,
            "title": "Issues",
            "width": "26%"
          },
          {
            "targets": 5,
            "searchable": true,
            "visible": false
          }
        ],
        "autoWidth": false,
        "lengthChange": false,
        "searching": true,
        "language": {
          "search": "Filter: ",
          "emptyTable": "No ontologies available"
        },
        "info": true,
        "paging": true,
        "pageLength": 100,
        "ordering": true,
        "stripeClasses": ["", "alt"],
        "dom": '<"ontology_nav">frtip'
      });
      // Keep header at top of table even when scrolling
      new jQuery.fn.dataTable.FixedHeader(ontTable);
    }
    return ontTable;
  }

  function showSubmissions(ev, acronym) {
    ev.preventDefault();
    jQuery.facebox({ ajax: BP_CONFIG.ui_url + "/admin/ontologies/" + acronym + "/submissions" });
  }

  function clearStatusMessages() {
    jQuery("#progress_message").hide();
    jQuery("#success_message").hide();
    jQuery("#error_message").hide();
    jQuery("#progress_message").html("");
    jQuery("#success_message").html("");
    jQuery("#error_message").html("");
  }

  function showProgressMessage(ontologies, operation) {
    clearStatusMessages();
    var msg = "Processing " + operation;

    if (ontologies[0] !== DUMMY_ONTOLOGY) {
      msg += " for " + ontologies.join(", ");
    }
    jQuery("#progress_message").text(msg).html();
    jQuery("#progress_message").show();
  }

  function showStatusMessages(success, errors) {
    if (success.length > 0) {
      jQuery("#success_message").text(success.join(", ")).html();
      jQuery("#success_message").show();
    }

    if (errors.length > 0) {
      jQuery("#error_message").text(errors.join(", ")).html();
      jQuery("#error_message").show();
    }
  }































  function ajaxCall(httpMethod, operation, path, params) {
    var ontArr = [];
    var errors = [];
    var success = [];
    var promises = [];

    if (params && params["ontologies"]) {
      ontArr = params["ontologies"].split(",");
      params["ontologies"] = '';
    }

    showProgressMessage(ontArr, operation);

    for (var i = 0; i < ontArr.length; i++) {
      // using javascript closure for passing index to asyncronous calls
      (function(i) {
        params["ontologies"] = ontArr[i];
        var req = jQuery.ajax({
          type: httpMethod,
          url: "/admin/" + path,
          data: params,
          dataType: "json",
          success: function(data, msg) {
            var reg = /\s*\,\s*/g;

            if (data.errors) {
              var err = data.errors.replace(reg, ',');
              errors.push.apply(errors, err.split(","));
            }

            if (data.success) {
              if (path === "refresh_ontologies_report") {



                displayOntologies(data);





              // deleting ontologies
              } else if (path === "ontologies" && httpMethod === "DELETE" &&
                  params["ontologies"]) {
                var ontTable = jQuery('#adminOntologies').DataTable();
                // remove ontology row from the table
                ontTable.row(jQuery("#tr_" + ontArr[i])).remove().draw();
              } else {
                // deleting a single submission
                var re = /^ontologies\/([\w.\-]+)\/submissions\/(\d+)$/;
                var match = path.match(re);

                // reload submissions facebox window
                if (match != null && httpMethod == "DELETE") {
                  jQuery.facebox({ ajax: BP_CONFIG.ui_url + "/admin/ontologies/" + ontArr[i] + "/submissions?time=" + new Date().getTime() });
                }
              }
              var suc = data.success.replace(reg, ',');
              success.push.apply(success, suc.split(","));
            }
            showStatusMessages(success, errors);
          },
          error: function(request, textStatus, errorThrown) {
            errors.push(request.status + ": " + errorThrown);
            showStatusMessages(success, errors);
          }
        });
        promises.push(req);
      })(i);
    }

    // hide progress message and deselect rows after ALL operations have completed
    jQuery.when.apply(null, promises).always(function() {
      jQuery("#progress_message").hide();
      jQuery("#progress_message").html("");
      jQuery('#adminOntologies tbody tr').removeClass('selected');
    });
  }

  jQuery(document).ready(function() {
    // display ontologies table on load
    displayOntologies({});

    // make sure facebox window is empty before populating it
    // otherwise ajax requests stack up and you see more than
    // one ontology's submissions
    jQuery(document).bind('beforeReveal.facebox', function() {
      jQuery("#facebox .content").empty();
    });

    // remove hidden divs for submissions of previously
    // clicked ontologies
    jQuery(document).bind('reveal.facebox', function() {
      jQuery('div[id=facebox]:hidden').remove();
    });

    // convert facebox window into a modal mode
    jQuery(document).bind('loading.facebox', function() {
      jQuery(document).unbind('keydown.facebox');
      jQuery('#facebox_overlay').unbind('click');
    });

    jQuery("div.ontology_nav").html('<span class="toggle-row-display">View Ontologies:&nbsp;&nbsp;&nbsp;&nbsp;<a id="show_all_ontologies_action" href="javascript:;"">All</a> | <a id="show_problem_only_ontologies_action" href="javascript:;">Problem Only</a></span><span style="padding-left:30px;">Apply to Selected Rows:&nbsp;&nbsp;&nbsp;&nbsp;<select id="admin_action" name="admin_action"><option value="">Please Select</option><option value="delete">Delete</option><option value="reparse">Re-parse</option></select>&nbsp;&nbsp;&nbsp;&nbsp;<a class="link_button ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" href="javascript:;" id="admin_action_submit"><span class="ui-button-text">Go</span></a></span>');

    // toggle between all and problem ontologies
    jQuery.fn.dataTable.ext.search.push(
      function(settings, data, dataIndex) {
        var row = settings.aoData[dataIndex].nTr;
        if (!problemOnly || row.classList.contains("problem") || data[data.length - 1] === "true") {
          return true;
        }
        return false;
      }
    );

    // for toggling between all and problem ontologies
    jQuery(".toggle-row-display a").live("click", function() {
      jQuery("#adminOntologies").DataTable().draw();
      return false;
    });

    // allow selecting of rows
    jQuery('#adminOntologies tbody').on('click', 'tr', function() {
      jQuery(this).toggleClass('selected');
    });

    // BUTTON onclick actions ---------------------------------------

    // onclick action for "Go" button for performing an action on a set of ontologies
    jQuery("#admin_action_submit").click(function() {
      performActionOnOntologies();
    });

    // onclick action for "Flush Memcache" button
    jQuery("#flush_memcache_action").click(function() {
      flushMemcache();
    });

    // onclick action for "Reset Memcache Connection" button
    jQuery("#reset_memcache_connection_action").click(function() {
      resetMemcacheConnection();
    });

    // onclick action for "Show All Ontologies" link
    jQuery("#show_all_ontologies_action").click(function() {
      toggleShow(false);
    });

    // onclick action for "Show Problem Only Ontologies" link
    jQuery("#show_problem_only_ontologies_action").click(function() {
      toggleShow(true);
    });

    // onclick action for "Refresh Report" link
    jQuery("#refresh_report_action").click(function() {
      refreshReport();
    });

    // end: BUTTON onclick actions -----------------------------------
  });

#DescriptionDialog{:style => "display:none", :title => "admin description"}
%h1.tab_header Ontology Administration
%br
%table.memcached_utilities{:style => "float:left;margin-left:8px;"}
  %tr
    %td{:valign => "top", :style => "white-space:nowrap;width:123px;"}
      %a#flush_memcache_action{:href => "javascript:;", :class => "link_button ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only"}
        %span{:class => "ui-button-text"} Flush Memcache
    %td{:valign => "top", :style => "white-space:nowrap;width:190px;"}
      %a#reset_memcache_connection_action{:href => "javascript:;", :class => "link_button ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only"}
        %span{:class => "ui-button-text"} Reset Memcache Connection
    %td{:valign => "top", :rowspan => 2}
      %div#progress_message
      %div#success_message{:class => "success_message"}
      %div#error_message{:class => "error_message"}
  %tr
    %td{:colspan => 2}
      Report generated on:&nbsp;&nbsp;&nbsp;#{@data[:date_generated]}
      %a#refresh_report_action{:href => "javascript:;", :class => "link_button ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only", :style => "margin-left:11px;"}
        %span{:class => "ui-button-text"}
          - if @data[:date_generated] === AdminController::REPORT_NEVER_GENERATED
            Generate
          - else
            Refresh
%p.tab_description{:style => "clear: both;"}
.ontologies_list_container
  %table#adminOntologies.zebra{:cellpadding => "0", :cellspacing => "0", :width => "100%"}
