- unless @error
  - @title = "#{@ontology.name} - #{@concept.prefLabel}"

  :javascript
    jQuery.rloader([
      {type:'css',src:'/javascripts/JqueryPlugins/autocomplete/jquery.autocomplete.css'},
      {type:'js',src:'/javascripts/JqueryPlugins/autocomplete/crossdomain_autocomplete.js?nocache=20120302'},
      {type:'js',src:'/javascripts/jquery.tools.min.js'},
      {type:'js',src:'/javascripts/JqueryPlugins/splitter/splitter.js'},
      {type:'js',src:'/javascripts/JqueryPlugins/datatables/js/jquery.dataTables.js'},
      {type:'js',src:'/javascripts/bp_mappings.js'}
    ]);

    var searchbox;

    // Called when the "Go" button on the Jump To form is clicked
    function jumpToValue(li){
      jQuery.blockUI({ message: '<h1><img src="/images/tree/spinner.gif" /> Loading Term...</h1>', showOverlay: false });

      if( li == null ){
        // User performs a search
        var search = confirm("Term could not be found.\n\nPress OK to go to the Search page or Cancel to continue browsing");

        if(search){
          jQuery("#search_keyword").val(jQuery("#search_box").val());
          jQuery("#search_form").submit();
          return
        }
      }

      // Appropriate value selected
      if( !!li.extra ){
        var sValue = jQuery("#jump_to_concept_id").val();

        // TODO_REV: Handle flat ontologies (replace `if (false)` with `if @ontology.flat?`)
        if (false) {
          History.pushState({p:"terms", conceptid:sValue, suid:"jump_to", flat:true, label:li.extra[4]}, jQuery.bioportal.ont_pages["terms"].page_name + " | " + org_site, "?p=terms&conceptid=" + sValue);
        } else {
          document.location="/ontologies/#{@ontology.acronym}/?p=terms&conceptid="+encodeURIComponent(sValue)+"&jump_to_nav=true";
          jQuery.blockUI({ message: '<h1><img src="/images/tree/spinner.gif" /> Loading Term...</h1>', showOverlay: false });
          return;
        }
      }
    }

    // Sets a hidden form value that records the concept id when a concept is chosen in the jump to
    // This is a workaround because the default autocomplete search method cannot distinguish between two
    // concepts that have the same preferred name but different ids.
    function jumpToSelect(li){
      jQuery("#jump_to_concept_id").val(li.extra[0]);
      jumpToValue(li);
    }

    // Formats the Jump To search results
    function formatItem(row) {
      var specials = new RegExp("[.*+?|()\\[\\]{}\\\\]", "g"); // .*+?|()[]{}\
      var keywords = jQuery("#search_box").val().replace(specials, "\\$&").split(' ').join('|');
      var regex = new RegExp( '(' + keywords + ')', 'gi' );
      var matchType = "";
      if (typeof row[2] !== "undefined" && row[2] !== "") {
        matchType = " <span style='font-size:9px;color:blue;'>(" + row[2] + ")</span>";
      }
      return row[0].replace(regex, "<b><span style='color:#006600;'>$1</span></b>") + matchType;
    }

    terms_init = function(){
      // Override the side of the bd_content div to avoid problems with
      // the window resizing, which can sometimes cause the right-hand content div to drop down
      var bd_content_width = jQuery("#ontology_content").width();
      jQuery("#bd_content").width(bd_content_width);

      // Split bar
      jQuery("#bd_content").splitter({
        sizeLeft: 300,
        resizeToWidth: true
      });
    }

    // The tab system
    jQuery(".tab").live("click", function(){
        var tabId = jQuery(this).children("a:first").attr("href").replace("#", "");
        showTermsTab(tabId);
    });

    function showTermsTab(tabId) {
      // Get the target content area
      var target = document.getElementById(tabId + "_content");

      if (target != null) {
        jQuery(".tab_container").addClass("not_visible");
        jQuery(target).removeClass("not_visible");
        jQuery(".tab").removeClass("selected");
        jQuery("#" + tabId + "_top").addClass("selected");
        jQuery(document).trigger("terms_tab_visible");
      }

      jQuery(document).trigger("visualize_tab_change", [{tabType: tabId}]);
    }

    // Only show BioMixer when tab is clicked
    jQuery(document).live("visualize_tab_change", function(event, data){
      if (data.tabType == "visualization") {
        jQuery("#biomixer_iframe").attr("src", jQuery("#biomixer_iframe").data("src"));
      }
    });

    function callTab(tab_name, url) {
        if (getCache(getConcept() + tab_name) != null) {
              document.getElementById(tab_name + "_content").innerHTML=getCache(getConcept() + tab_name);
        } else {
          jQuery("#" + tab_name + "_content").html('<h1><img src="/images/tree/spinner.gif" /> Loading Resources...</h1>');
          jQuery.get(url.replace("@ontology@",getOntology()).replace("@concept@",encodeURIComponent(getConcept())),function(data){
            jQuery("#" + tab_name + "_content").html(data);
            jQuery("#" + tab_name + "_content").append(
              jQuery("<input type='hidden'/>")
                .attr("id", "resource_index_terms")
                .val([jQuery(document.body).data("ont_id")+"/"+encodeURIComponent(getConcept())])
            );
            setCache(getConcept() + tab_name,data);
            jQuery.unblockUI();
            tb_init('a.thickbox, area.thickbox, input.thickbox');
          });
        }
    }

    search_box_init = function(){
      jQuery("#search_box").bioportal_autocomplete("/search/json_search/#{@ontology.acronym}", {
        extraParams: { objecttypes: "class" },
        width: "400px",
        selectFirst: true,
        lineSeparator: "~!~",
        matchSubset: 0,
        minChars: 1,
        maxItemsToShow: 20,
        onFindValue: jumpToValue,
        onItemSelect: jumpToSelect,
        formatItem: formatItem
      });
      searchbox = jQuery("#search_box")[0].autocompleter;
    }

    jQuery(document).ready(function() {
      terms_init();
      search_box_init();
    });

    jQuery(document).ready(function(){
      // TODO_REV: Handle views (replace `if (false)` with `@ontology.isView == 'true'`)
      if (false) {
        // Set up a hovertip on the qsearch input element
        jQuery("#resource_index_top").attr("style", "color: grey;");
        jQuery("#resource_index_top").attr("title", "Resource Index isn't available for Views");
        jQuery("#resource_index_top").tooltip({
            position: "bottom center",
            tip: '.tooltip',
            opacity: 0.7
        });
      }

      // TODO_REV: Handle search index notice when ontology isn't indexed
      /*
        if !@ontology.in_search_index?
          if !@ontology.latest?
          // This shows a tooltip on the disabled for elements when ontology isn't the newest (ie missing from index)
          jQuery("#qsearch").children().filter(":input").each(function(){
            jQuery(this).attr("readonly", true);
          });
          jQuery("#qsearch").attr("style", "color: grey;");

          if @ontology.latest?
            message = "This ontology has recently been updated and new terms may not yet be available through \"Jump To\""
          else
            message = "\"Jump To\" only works with the most recently indexed version of this ontology"

          // Set up a hovertip on the qsearch input element
          jQuery("#qsearch :input").attr("title", message);
          jQuery("#qsearch :input").tooltip({
              position: "top center",
              offset: [-5, 0],
              tip: '.tooltip',
              opacity: 0.9
          });
        }
      */
    });

    // Tab auto-select based on parameter "t"
    jQuery(document).ready(function(){
      var url, urlFragment, paramsList, params = {}, splitParam, content;
      url = document.URL;

      if (url.indexOf("?") > 0) {
        urlFragment = url.split("?");
        paramsList = urlFragment[1].split("&");

        for (param in paramsList) {
          splitParam = paramsList[param].split("=");

          if (splitParam.length > 1)
            params[splitParam[0]] = splitParam[1].split("#")[0];
        }

        if (params !== "undefined" && "t" in params) {
          showTermsTab(params["t"]);
        }
      }
    });

    // Javascript for the permalink box
    jQuery(document).ready(function(){
      jQuery("#close_permalink").live("click", function(){
        jQuery("#purl_link_container").hide();
      });

      jQuery("#term_permalink").live("click", function(e){
        e.preventDefault();
        jQuery("#purl_link_container").show();
      });

      jQuery("#purl_input").live("focus", function(){
        this.select();
      });
    });

  .tooltip
  #bd_content.explore
    #sidebar
      #qsearch
        Jump To:
        %input#search_box{:size => "30", :type => "textbox"}/
        %input#jump_to_concept_id{:type => "hidden"}/
        / TODO_REV: Flat ontology support
        -# if @ontology.flat?
        /  #flat_help{:style => "padding: 5px; background-color: #DADDE0; color: black;"}
        /    This ontology cannot be displayed as a tree. You can use the "Jump To" field to search for and display terms.
      #sd_content.sd_max_height
        = loading_spinner(true)
      %div{:style => "clear:both;"}

    - if @concept.id.eql?("bp_fake_root")
      / When we have an ontology with a flat hierarchy, we initially disable the tabs because we don't have a term to display
      #container
        #fake_tabs.tabs
          %ul
            %li#details_top.selected.first{:onclick => "return false;"}
              %a{:href => "#details", :onclick => "return false;", :style => "color: gray;"} Details
            %li#visualization_top{:onclick => "return false;"}
              %a{:href => "#visualization", :onclick => "return false;", :style => "color: gray;"} Visualization
            %li#notes_top{:onclick => "return false;"}
              %a{:href => "#notes", :onclick => "return false;", :style => "color: gray;"}
                Notes
                %span#note_count_wrapper
                  (
                  %span#note_count
                  )
            %li#mappings_top{:onclick => "return false;"}
              %a{:href => "#mappings", :onclick => "return false;", :style => "color: gray;"}
                Term Mappings (
                %span#mapping_count= #TODO_REV: Support mapping counts for concepts @concept.mapping_count
                )
            - unless !$RESOURCE_INDEX_DISABLED.nil? && $RESOURCE_INDEX_DISABLED
              %li#resource_index_top{:onclick => "return false;"}
                %a{:href => "", :onclick => "return false;", :style => "color: gray;"} Term Resources

        #non_fake_tabs.tabs{:style => "display: none;"}
          %ul
            %li#details_top.selected.tab.first
              %a{:href => "#details"} Details
            %li#visualization_top.tab
              %a{:href => "#visualization"} Visualization
            %li#notes_top.tab
              %a{:href => "#notes"}
                Notes
                %span#note_count_wrapper
                  (
                  %span#note_count>
                  )
            %li#mappings_top.tab
              %a{:href => "#mappings"}
                Term Mappings (
                %span#mapping_count>= @concept.mapping_count
                )
            - unless !$RESOURCE_INDEX_DISABLED.nil? && $RESOURCE_INDEX_DISABLED
              - if !@ontology.isView.eql?('true')
                %li#resource_index_top.tab{:onclick => "callTab('resource_index','/resource_index/resources_table?conceptids=#{@ontology.ontologyId}/#{CGI.escape(@concept.id)}');"}
                  %a{:alt => "callTab('resource_index','/resource_index/resources_table?conceptids=#{@ontology.ontologyId}/#{CGI.escape(@concept.id)}')", :href => "#resource_index"} Term Resources
          - if @ontology.isView=='true'
            %li#resource_index_top{:onclick => "return false;"}
              %a{:href => "", :onclick => "return false;", :style => "color: gray;"} Resource Index

        #contents
          #details_content.tab_container
            %div{:style => "padding: 100px 0; font-size: larger; font-weight: bold; text-align: center;"} Use the "Jump To" to find a term and display Details, Visualization, Notes, Mappings, and Resources
          #visualization_content.tab_container.not_visible
          #notes_content.tab_container.not_visible
          #mappings_content.tab_container.not_visible
          #resource_index_content.tab_container.not_visible.resource_index_embed
    - else
      #container
        .tabs
          %ul
            %li#details_top.selected.tab.first
              %a{:href => "#details"} Details
            %li#visualization_top.tab
              %a{:href => "#visualization"} Visualization
            %li#notes_top.tab
              %a{:href => "#notes"}
                Notes
                %span#note_count_wrapper
                  (
                  %span#note_count= @notes.length
                  )
            %li#mappings_top.tab
              %a{:href => "#mappings"}
                Term Mappings (
                %span#mapping_count=  #TODO_REV: Support mapping counts for concepts @concept.mapping_count
                )
            /- unless !$RESOURCE_INDEX_DISABLED.nil? && $RESOURCE_INDEX_DISABLED
            /  - if !@ontology.isView.eql?('true')
            /    %li#resource_index_top.tab{:onclick => "callTab('resource_index','/resource_index/resources_table?conceptids=#{@ontology.ontologyId}/#{CGI.escape(@concept.id)}');"}
            /      %a{:alt => "callTab('resource_index','/resource_index/resources_table?conceptids=#{@ontology.ontologyId}/#{CGI.escape(@concept.id)}')", :href => "#resource_index"} Term Resources
            /  - else
            /    %li#resource_index_top{:onclick => "return false;"}
            /      %a{:href => "", :onclick => "return false;", :style => "color: gray;"} Resource Index
          / TODO_REV: Supoprt PURLs
          /- if $PURL_ENABLED
          /  %span{:style => "float: right;"}
          /    %a#term_permalink{:href => @current_purl, :style => "padding: 0;", :title => "Get a permanent link to this term"}
          /      %img{:src => "/stylesheets/layout/images/link_icon.png", :style => "height: 14px; padding: 5px;"}/
        #contents
          #details_content.tab_container= render :partial =>'/concepts/details'
          #visualization_content.tab_container.not_visible=# TODO_REV: BioMixer render :partial =>'/concepts/biomixer'
          #notes_content.tab_container.not_visible= render :partial =>'/notes/list'
          #mappings_content.tab_container.not_visible=# TODO_REV: Mappings tab for class render :partial =>'/mappings/concept_mappings'
          - unless !$RESOURCE_INDEX_DISABLED.nil? && $RESOURCE_INDEX_DISABLED
            #resource_index_content.tab_container.not_visible.resource_index_embed
          - if $PURL_ENABLED
            #purl_link_container.term_permalink{:style => "display: none;"}
              %h2 Permanent link to this term
              %a#close_permalink.ui-dialog-titlebar-close.ui-corner-all{:href => "javascript:void(0);", :role => "button", :style => "-moz-user-select: none; position: absolute; right: 5px; top: 5px;", :unselectable => "on"}
                %span.ui-icon.ui-icon-closethick{:style => "-moz-user-select: none;", :unselectable => "on"} close
              %input#purl_input{:style => "width: 380px;", :type => "textfield", :value => @current_purl}/
  - form_for(:search, :url => {:controller =>'search',:action=>'fetch_results'},:html=>{:id=>'search_form'}) do |f|
    %input{:name => "search[ontologies][]", :type => "hidden", :value => @ontology.acronym}/
    = hidden_field :search, :search_type, :value=>"contains"
    = hidden_field :search, :keyword, :value=>"",:id=>"search_keyword"
  %div{:style => "clear: both;"}
  / Create mapping UI
  #create_mapping{:style => "left: -99999px; position: absolute;"}
    =# TODO_REV: Mappings support (create mapping) render :partial => '/mappings/new_form', :locals => { :ontology_from => @ontology.id, :concept_from => @concept.fullId }
- else # found an error
  = "<div id=\"error\"><h2>#{@error}</h2></div>"
