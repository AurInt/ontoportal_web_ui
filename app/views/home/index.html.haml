- @title = "Welcome to the #{$ORG_SITE}"

:css
  .greyed{
    color:#CFCFCF;
  }
- unless $FRONT_NOTICE.nil? || $FRONT_NOTICE.empty? || cookies[:front_page_notice_closed].eql?("true")
  :javascript
    function close_message(){
      var exdate = new Date();
      exdate.setDate(exdate.getDate() + 7);
      document.cookie="front_page_notice_closed=true; expires="+exdate.toGMTString();
      jQuery("#notice_message").hide();
    }
    %p#notice_message{:style => "padding: 10px; margin: 10px; border:1px solid #EFEFEF; background-color: #F9F9F9;"}
    = $FRONT_NOTICE
    \&nbsp;&nbsp;
    %a{:href => "#", :onclick => "close_message(); return false;", :style => "font-size: small; color: darkGray;"} [close]

%div{class: "container", style: "padding-top: 15px; padding-bottom: 25px"}

  %div{class: "row"}
    %div{class: "col-md-12"}
      %p{class: "text-center", style: "padding-top: 25px; padding-bottom: 25px;"}
        %span{style: "font-size:1.75em; font-weight:bold;"} Welcome to #{$SITE}, 
        %span{style: "font-size:1.6em"} the world&rsquo;s most comprehensive repository of biomedical ontologies

  %div.search{class: "row"}
    -# Search for a class across ontologies
    %div{class: "col-md-6"}
      = form_for(:search, :url => {:controller =>'search', :action=>'index'}, :html => { :method => :get }) do |f|
        %div{class: "panel panel-default"}
          %div{class: "panel-heading"}
            %h3{class: "panel-title"} Search for a class
          %div{class: "panel-body"}
            %table
              %tr
                %td{:nowrap => ""}
                  %input.greyed{:name => "query", :onclick => "greybox(this)", :type => "text", :value => "Enter concept, e.g. Melanoma"}/
                  = submit_tag 'Search',:class=>'home_button'
              %tr
                %td{:style => "padding-left:15px"}
                  %a{:href => "/search?opt=advanced"} Advanced Search

    -# Search for an ontology
    %div{class: "col-md-6"}
      %div{class: "panel panel-default"}
        %div{class: "panel-heading"}
          %h3{class: "panel-title"} Find an ontology
        %div{class: "panel-body"}
          %table
            %tr
              %td{:nowrap => ""}
                %input#find_ontology.home_input.greyed{:name => "ontology", :onclick => "greybox(this)", :type => "text", :value => "Enter ontology name, e.g. NCI Thesaurus"}/
                %input.home_button{:onclick => "jumpToValueOntology()", :type => "button", :value => "Explore"}/
                %input#find_ontology_id{:type => "hidden"}/
            - if at_slice?
              %tr
                %td &nbsp;
            - else
              %tr
                %td{:style => "padding-left:15px;height:10px;"}
                  %ul.sf-menu.sf-vertical
                    %li
                      = link_to("Browse Ontologies", "#", style: "white-space: nowrap; padding: 0px; background: #fff; border: 1px solid #fff;")
                      %ul
                        %li
                          = link_to("All", ontologies_path())
                        - @groups.to_a.each do |group|
                          %li
                            = link_to(group[:name], ontologies_path(filter: "#{CGI.escape(group[:acronym])}"))    

  %div.statistics{class: "row"}
    -# Ontology visits
    %div{class: "col-md-6"}
      %div{class: "panel panel-default"}
        %div{class: "panel-heading"}
          %h3{class: "panel-title"} Ontology Visits #{"in full #{$SITE} " if at_slice?} (#{@analytics.date.strftime("%B %Y")})
        %div{class: "panel-body"}
          %table.minimal.align-right{width: "100%", style: "margin-bottom: 25px;"}
            %tbody
              -@analytics.onts[0..4].each do |visits|
                -ont = @ontologies_hash[visits[:ont].to_s]
                -next if ont.nil?
                %tr
                  %td
                    = link_to("#{ont.name} (#{ont.acronym})", ontology_path(ont.acronym))
                  %td
                    = number_with_delimiter(visits[:views])
              %tr
                %td{colspan: 2, style: "text-align: right;"}
                  %a#ont_view_popup{href: "#ont_views", rel: "facebox"} More
                  :javascript
                    jQuery(document).ready(function(){
                      jQuery("#ont_view_popup").facebox();
                    });
          :css
            #bd #ont_views {
              left: -99999px;
              position: absolute;
            }
          %div#ont_views
            %h2 Visits for #{@analytics.date.strftime("%B %Y")}
            %table.minimal.align-right{width: "100%"}
              %tbody
                - count = 0
                - @analytics.onts.each do |visits|
                  - ont = @ontologies_hash[visits[:ont].to_s]
                  - next if ont.nil?
                  - count += 1
                  %tr
                    %td
                      #{count}.
                      = link_to("#{ont.name} (#{ont.acronym})", ontology_path(ont.acronym))
                    %td
                      = number_with_delimiter(visits[:views])

    -# Ontology statistics
    %div{class: "col-md-6"}
      %div{class: "panel panel-default"}
        %div{class: "panel-heading"}
          %h3{class: "panel-title"} #{$SITE} Statistics #{"in full #{$SITE}" if at_slice?}
        %div{class: "panel-body"}
          %table.minimal.align-right{width: "100%", style: "margin-bottom: 25px;"}
            %tbody
              %tr
                %td Ontologies
                %td= @ont_count
              %tr
                %td Classes
                %td= number_with_delimiter(@cls_count, :delimiter => ",")
              %tr
                %td Resources Indexed
                %td= number_with_delimiter(@ri_resources, :delimiter => ",")
              %tr
                %td Indexed Records
                %td= number_with_delimiter(@ri_record_count, :delimiter => ",")
              %tr
                %td Direct Annotations
                %td= number_with_delimiter(@direct_annotations, :delimiter => ",")
              %tr
                %td Direct Plus Expanded Annotations
                %td= number_with_delimiter(@direct_expanded_annotations, :delimiter => ",")


- ont_names = @ontologies.map{|ont| "[\"#{ont.name} (#{ont.acronym})\",\"#{ont.acronym}\"]"}

:javascript
  function jumpToValueOntology() {
    var ontology = jQuery("#find_ontology")[0].value;
    var ontology_id = jQuery("#find_ontology_id").val();

    if (ontology_id == null || ontology_id == "") {
      // didnt pick an ont
      alert("The ontology does not exist. You must pick an ontology from the list.")

      return false;
    }

    if (!!ontology_id) {
      var sValue = jQuery("#find_ontology_id").val();
      if (sValue == null || sValue == "") {
        sValue = data;
      }
      document.location="/ontologies/"+sValue;
      jQuery.blockUI({ message: '<h1>#{image_tag("jquery.simple.tree/spinner.gif")} Loading Ontology...</h1>' });
      return;
    }
  }

  function formatResultOntologySearch(value, data) {
    jQuery("#find_ontology_id").val("");
    var specials = new RegExp("[.*+?|()\\[\\]{}\\\\]", "g"); // .*+?|()[]{}\
    var keywords = jQuery("#find_ontology").val().replace(specials, "\\$&").split(' ').join('|');
    var regex = new RegExp( '(' + keywords + ')', 'gi' );
    return value.replace(regex, "<b><span style='color:#006600;'>$1</span></b>");
  }

  function jumpToValueResource(){
    var cls = jQuery("#find_resource")[0].value;
    var data = jQuery('body').data("resource_results");

    if (data == null) {
      // Im doing a search

      var search = confirm("Press OK to Search for resources using the concept, or Cancel to select a concept")
      if (search) {
        query = jQuery("#find_resource").val();
        document.location="/resource_index";
        return;
      }
    }

    if (!!data) {
      var concept_id = data[0];
      var ontology_version_id = data[2];
      var ontology_id = data[7];
      var full_ontology_id = jQuery(document).data().bp.config.rest_url + "/ontologies/" + ontology_id;
      window.location = "/resource_index/resources?classes[" + encodeURIComponent(full_ontology_id) + "]=" + encodeURIComponent(concept_id);
      return;
    }
  }

  function formatItemResource(value, data) {
    jQuery('body').data("resource_results", null);
    var specials = new RegExp("[.*+?|()\\[\\]{}\\\\]", "g"); // .*+?|()[]{}\
    var keywords = jQuery("#find_resource").val().replace(specials, "\\$&").split(' ').join('|');
    var regex = new RegExp( '(' + keywords + ')', 'gi' );

    // data[7] is the ontology_id, only included when searching multiple ontologies
    if (data[6] == undefined) {
      var result = value.replace(regex, "<b><span style='color:#006600;'>$1</span></b>") + " <span style='font-size:9px;color:blue;'>(" + data[1] + ")</span>";
    } else {
      var result = value.replace(regex, "<b><span style='color:#006600;'>$1</span></b>") + " <span style='font-size:9px;color:blue;'>(" + data[1] + ")</span>" + "<span style='color:grey;font-size:7pt;'> from: " + data[6] + "</span>";
    }

    return result;
  }

  // We use this in conjunction with autocomplete because autocomplete
  // fails when there are multiple results with the same class name
  function selectResource(value, data) {
    jQuery('body').data("resource_results", value.data);
    jumpToValueResource();
  }

  // Sets a hidden form value that records the virtual id when a concept is chosen in the jump to
  // This is a workaround because the default autocomplete search method cannot distinguish between two
  // ontologies that have the same preferred name but different ids.
  function selectFindOntology(value, data){
    jQuery("#find_ontology_id").val(value.data[0]);
    jQuery("#find_ontology").focus();
    jumpToValueOntology();
  }

  var ontologies_array=[#{ont_names.join(",")}];

  jQuery(document).ready(function() {
    jQuery("#find_ontology").autocomplete({
      selectFirst: true,
      data: ontologies_array,
      minChars: 1,
      matchSubset: 1,
      maxItemsToShow: 20,
      delay: 1,
      showResult: formatResultOntologySearch,
      onItemSelect: selectFindOntology
    });

    jQuery("#find_resource").autocomplete({
      selectFirst: true,
      url: "/search/json_search/",
      extraParams: { separator: "\n" },
      cacheLength: 1,
      maxCacheLength: 1,
      matchSubset: 0,
      minChars: 3,
      maxItemsToShow: 20,
      showResult: formatItemResource,
      onItemSelect: selectResource
    });

    jQuery('ul.sf-menu').superfish({
      animation: {height:'show'},   // slide-down effect without fade-in
      delay:     1200               // 1.2 second delay on mouseout);
    });

  });


  function greybox(box){

    if(jQuery(box).hasClass("greyed")){
      jQuery(box).removeClass('greyed');
      jQuery(box).val("");
    }
  }


