- @title = "Annotator"

%head
  = javascript_include_tag "bp_annotatorplus"
%div.container-fluid

  %div.row
    %div.col-xs-12
      %h1 Annotator
      %p
        = t('annotator.intro').html_safe
        = link_to(help_path(anchor: "Annotator_Tab"), id: "annotator-help", target: "_blank") do
          %i.fa.fa-question-circle.fa-lg{aria: {hidden: true}, style: "margin-left: .5em"}

  %div.row
    %div.col-xs-12
      %form{style: "margin-bottom: 25px"}
        %div.form-group
          = text_area_tag("annotation_text", nil, rows: 15, class: "form-control", placeholder: "Enter or paste text to be annotated")
          %p.help-block
            %a#insert_text_link{href: "javascript:void(0);"} insert sample text

        = label_tag("longest_only", nil, class: "checkbox-inline") do
          = check_box_tag("longest_only", "all", false)
          Match longest only
        = label_tag("whole_word_only", nil, class: "checkbox-inline") do
          = check_box_tag("whole_word_only", "all", false)
          Match partial words
        = label_tag("mappings_all", nil, class: "checkbox-inline") do
          = check_box_tag("mappings", "all", false, id: "mappings_all")
          Include mappings
        = label_tag("exclude_numbers", nil, class: "checkbox-inline") do
          = check_box_tag("exclude_numbers", "all", false)
          Exclude numbers
        = label_tag("exclude_synonyms", nil, class: "checkbox-inline") do
          = check_box_tag("exclude_synonyms", "all", false)
          Exclude synonyms

        %div.form-group
          = render partial: "shared/ontology_picker", locals: { :custom_ontologies => @annotator_ontologies }

        - if @sem_type_ont
          %div.form-group
            %label{for: "semantic_types"} Select UMLS semantic types
            = select_tag("semantic_types", options_for_select(@semantic_types_for_select), multiple: "true", data: {placeholder: "Start typing to select UMLS semantic types"}, class: "form-control", style: "width: 432px")

        - if @sem_type_ont
          %div.form-group
            %label{for: "semantic_groups"} Select UMLS semantic groups
            %br
            = select_tag("semantic_groups", options_for_select(@semantic_groups_for_select), multiple: "true", data: {placeholder: "Start typing to select UMLS semantic groups"}, class: "form-control", style: "width: 432px")

        %div.form-group
          %label{for: "class_hierarchy_max_level"} Include ancestors up to level:
          - options = [["none", 0], *(1..10).map {|i| [i, i]}, ["all", 999]]
          = select_tag("class_hierarchy_max_level", options_for_select(options, 0))
          %br
          %label{for:"score"} Include Score:
          - options = [["None", ""], ["Old", "old"], ["cvalue", "cvalue"], ["cvalueh", "cvalueh"]]
          = select_tag :score, options_for_select(options, 0)
          = help_icon("/annotatorplus", {:title => "Score the annotations following the previous 2009 NCBO measure (old) or the C-Value measure (cvalue). If hierarchy expansion is also used then prefer cvalueh. "}).html_safe
          %br
          %label{for: "score_threshold"} Filter by Score Threshold:
          = number_field_tag :score_threshold,0, :id => "score_threshold"
          = help_icon("/annotatorplus", {:title => "Specifies the minimum score value for annotations."}).html_safe
          %br
          %label{for: "confidence_threshold"} Filter Confidence Threshold:
          = number_field_tag :confidence_threshold,0, min: 0, max:100, :id => "confidence_threshold"
          = help_icon("/annotatorplus", {:title => "Specifies the minimum position in the scoring distribution (between 1 and 100)"}).html_safe

        %div.form-group
          = label_tag("negation", nil, class: "checkbox-inline") do
            = check_box_tag :negation, :all, false, :id => "negation"
            Detect negation
            = help_icon("/annotatorplus", {:title => "Detect if a concept has been negated (affirmed, negated, possible)"}).html_safe
          = label_tag("experiencer", nil, class: "checkbox-inline") do
            = check_box_tag :experiencer, :all, false, :id => "experiencer"
            Detect experiencer
            = help_icon("/annotatorplus", {:title => "Detect who experienced the each identified concept (patient, other)"}).html_safe
          = label_tag("temporality", nil, class: "checkbox-inline") do
            = check_box_tag :temporality, :all, false, :id => "temporality"
            Detect temporality
            = help_icon("/annotatorplus", {:title => "Detect when the annotated concept occurred (recent, historical, hypothetical)"}).html_safe

        - if @recognizers.length > 1
          %div.form-group
            %label{for: "recognizer"} Entity recognizer:
            - default_recognizer = @recognizers.include?("mgrep") ? "mgrep" : @recognizers.first
            = select_tag("recognizer", options_for_select(@recognizers.map {|r| [r,r]}, default_recognizer))

        / annotator_button calls 'get_annotations' in bp_annotator.js
        %input#annotator_button{type: "button", value: "Get Annotations", class: "btn btn-primary"}/
        %span.annotator_spinner{style: "display: none;"}
          %img{src: asset_path('spinners/spinner_000000_16px.gif'), style: "vertical-align: middle;"}/
        %span#annotator_error.annotator_error{style: "color: red; vertical-align: middle; margin-left: 3px;"}



  %div.row
    %div.col-xs-12
      #annotations_container
        #result_counts
        %h2{:style => "margin-bottom: 0;"}
          Annotations
        #filter_list{:style => "font-size: 9pt; color: gray; display: none; clear: both; margin: -15px 0 5px"}
          %span#filter_title> Results are filtered by:
          \&nbsp;
          %span#filter_names
        #results_error{:style => "color: red; margin-bottom: 7px;"}
        %table#annotations.zebra{:style => "min-width: 700px; width: 100%;"}
          %thead
            %tr
              %th
                Class
                %span.popup_container
                  %span.bp_popup_link_container
                    %a#filter_classes.bp_popup_link{:href => "javascript:void(0);"} filter
                  %div#classes_filter_list.bp_popup_list
              %th
                Ontology
                %span.popup_container
                  %span.bp_popup_link_container
                    %a#filter_ontologies.bp_popup_link{:href => "javascript:void(0);"} filter
                  %div#ontology_filter_list.bp_popup_list
              %th{class: "match_type"}
                Type
                %span.popup_container
                  %span.bp_popup_link_container
                    %a#filter_match_type.bp_popup_link{:href => "javascript:void(0);"} filter
                  %div#match_type_filter_list.bp_popup_list
              %th UMLS Sem Type
              %th{class: "match_context"} Context
              %th
                Matched Class
                %span.popup_container
                  %span.bp_popup_link_container
                    %a#filter_matched_classes.bp_popup_link{:href => "javascript:void(0);"} filter
                  %div#matched_classes_filter_list.bp_popup_list
              %th
                Matched Ontology
                %span.popup_container
                  %span.bp_popup_link_container
                    %a#filter_matched_ontologies.bp_popup_link{:href => "javascript:void(0);"} filter
                  %div#matched_ontology_filter_list.bp_popup_list
              %th Score
              %th Negation
              %th Experiencer
              %th Temporality
          %tbody
    #download_links{:style => "margin-top: 1.5em;"}
    %p
      %span{:style => "padding: 0 3px 0 0;"}>
        %b Format Results As:
        %span#download_links_tabdelimited.link_button.ui_button
        %span#download_links_json.link_button.ui_button
        %span#download_links_rdf.link_button.ui_button
        %span#download_links_text.link_button.ui_button
      %span#download_links_xml.link_button.ui_button
    %span{:style => "font-size: 8pt;"}
      To reproduce these results:
      %br/
      %span#annotator_parameters{:style => "color: gray; font-weight: bold;"}
      %br/
      Additional parameters are documented at
      \#{link_to 'Annotator Web Service', "#{$REST_URL}/documentation#nav_annotator", :target => "_blank"}
