%div.element_results.paginate_ajax{:id => "#{@resource_results.resourceId}_results"}
  -resource_id = @resource_results.resourceId
  -resource_data = @resources_hash[resource_id]
  -resource_url = resource_data.include?(:resourceElementURL) ? resource_data[:resourceElementURL] : ""
  -@resource_results.each do |element|
    // this gsub generates: active_support/core_ext/string/output_safety.rb:22: warning: regexp match /.../n against to UTF-8 string
    -element_id = CGI.escape(element[:id].gsub(/[^0-9A-Za-z]/, ""))
    -element_url = resource_url + element[:id]
    -element_data = {:clean_element_id => element_id, :element_id => CGI.escape(element[:id]), :resource_id => resource_id}
    -fields_hash = element.fields.to_h  # convert from read-only struct
    -fields_hash.delete_if {|k,v| v.nil? }  # remove the 'links' and 'context', which have nil values.
    -field_main = fields_hash[ resource_data[:mainContext].to_sym ] # extract the 'main' field.
    %div.element_result{:data => {:element_id => element_id}}
      %div{:id => "#{element_id}_link"}
        %a{:href => "javascript:void(0);", :class => "show_element_details", :data => element_data}= field_main.text
      %div.not_visible.element_results{:id => element_id+"_text", :data => {:highlighted => false}}
        %div.ri_legend_container
          %div.ri_legend
            %div <b>annotation types</b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            %div <span class='definition' title="matched preferred name or synonym of the search term directly">direct</span>:
            %div.direct.highlight_box &nbsp;
            %div <span class='definition' title="matched preferred name or synonym of a term mapped to the search term">mapping</span>:
            %div.mapping.highlight_box &nbsp;
            %div <span class='definition' title="matched preferred name or synonym of a subclass of the search term">descendent</span>:
            %div.hierarchy.highlight_box &nbsp;
            %div.clearing
        %div.element_text
          -fields_sorted = fields_hash.sort_by { |k,v| v.weight }.reverse  # returns list like [ [k,v], ...]
          -fields_sorted.each do |field_list|  # field_list contains [ field_symbol, field_struct ]
            -field_name = field_list[0].to_s
            -field = field_list[1]
            %h4= field_name.split("_").drop(1).join(" ").capitalize
            %p{:data => {:context_name => field_name}}= field_text(field)  # see resource_index_helper.rb
          %span{:class => "element_info"}
            %a{:href => element_url, :target => "_blank"} view source record
  = will_paginate @resource_results, :update => "#{resource_id}_results",
    :params => { :offset => @resource_results.offset,
      :limit => @resource_results.limit,
      :resourceId => resource_id,
      :classes => @classes,
      :controller => "resource_index",
      :action => "results_paginate" }

